

a. HTML ==> content
b. CSS  ==> style
c. Javascript ==> behavior

----------------------------------------

what .js-programs can do on HTML-page in browser-envi ?


 js-lang can do any dynamic-data/actions on browser
 with help of browser given APIs

 browser's APIs  based on w3c-standards

 - DOM ( Document Object Model )
 - XHR ( XMLHttpRequest )
 - Timer 
 ...


using DOM API
----------------
--> can create,retreive,update,delete HTML-elements
--> can change element's inner text/html
--> can change element's attribute values
--> can change element's style(s)
--> to listen event(s) on HTML elements  ( Event-Driven-Programming)
--> can validate form-fields before submit
--> can create rich UI components ( e. layout, input , data-driven comps)
......


using XHR
-----------
--> can communicate with server-side programs async, 
   update response in existing-page ( AJAX )

using Timer API
-----------------
--> can do timer-based actions in browser   ( setTimeout,setInterval)


HTML5
----------

ref:  https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5




//--------------------------------------------------------




   .js-lang

      ==> single-threaded-lang , but we can do concurrent actions thru events
      ==> all IO operations are Non-Blocking

      ----------------------------------------------------------


     browesr e.g chrome


      1. JS runtime/engine ( v8 )  ==> ECMAScript spec

            - single-call-stack  ==> to execute js-contexts
            - heap               ==> to hold objects

      2. Web APIs ( e.g DOM, XHR , Timer ...)  ==> w3c standards

      3. Event/Callback/Message Queue

      4. Event-Loop

      ----------------------------------------------------------
     
     ref :

       https://developer.mozilla.org/bm/docs/Web/JavaScript/EventLoop
       http://latentflip.com/loupe/ 


       -----------------------------------------------------------



       plain .js : probblems /complexities


      => browser compataibility
      => manual memory management  ( i. cleaning un-used DOM elements , )
      => perfoamnce issues  ( i.e finding/updating/inserting DOM elements ( DOM manipulation ))
      => data-binding is manual ( 50 to 60% js-code )
      => code organizationis difficult
      ...
      ----------------------------------------------------------


      soln : using third-party .js libraries and F.Ws


      --> jQuery
      --> backbone / Marionet
      ...

      MVC & MVVM

      -->  Angularjs  : google
      -->  Emberjs
      -->  knockout
      -->  Yui
      ......

      UI components

      --> DOJO
      --> ExtJS ==> sencha 

      --------------------------------------


      web-component based F.W
      ---------------------------


      Facebook : React 
      Google   : Angular - v4


       ---------------------------------------




         



















